#!/bin/bash

# Print the usage details for the script when called at a command prompt.
function printUsage {
    echo "Select one argument to use when calling this script:"
    echo " "
    echo "all         Build all user-facing documentation that comes"
    echo "            from XML source files in this repository."
    echo "pdf         Build all PDF's (everything except API and datamodel)."   
    echo "admin       Build the administrator doc (PDF)."
    echo "dashboard   Build the dashboard customization doc (PDF)."
    echo "dev-all     Call the script to get new copies of the"
    echo "            autogenerated XML files for API and data model"
    echo "            docs, then build the developer doc deliverable"
    echo "            (HTML and supporting files). Same as running this"
    echo "            script with 'dev-auto' followed by 'dev-html'."
    echo "dev-auto    Call the script to get new copies of the"
    echo "            autogenerated XML files for API and data model"
    echo "            docs, but don't generate the final HTML."
    echo "dev-html    Build the developer doc deliverable (HTML and"
    echo "            supporting files) using existing autogenerated XML"
    echo "            files for API and data model docs (don't call the"
    echo "            script to generate new ones)."
    echo "ingestion   Build the ingestion doc (PDF)."
    echo "runbook     Build the operator doc, called the runbook (PDF)."
    echo " "
}

# Check the local environment has the necessary setup, and provide a hint
# to the user if there's something missing.
function checkEnv {
    if [[ $APPDIR == "" ]]; then
        echo "ERROR... The APPDIR variable is not set in your bash shell. Set your bash shell configuration so that APPDIR is the absolute path to the directory where you have installed the files and apps needed for building documentation (DocBook XSL, Saxon, Apache FOP, etc.)."
        exit 1
    fi
    if [[ ! -f "$APPDIR/docbook-xsl-ns-1.78.1/VERSION" ]]; then
        echo "ERROR... DocBook XSL 1.78.1 with namespace support (ns) was not found at APPDIR/docbook-xsl-ns-1.78.1. Be sure to install DocBook XSL 1.78.1."
        exit 1
    fi
    if [[ ! -f "$APPDIR/saxon9he.jar" ]]; then
        echo "ERROR... Saxon 9.4 HE was not found at APPDIR/saxon9he.jar. Be sure to install Saxon 9.4 HE as described in the comments of this script."
        exit 1
    fi
    if [[ ! -f "$APPDIR/fop-1.0/fop" ]]; then
        echo "ERROR... Apache FOP 1.0 was not found at APPDIR/fop-1.0. Be sure to install Apache FOP 1.0."
        exit 1
    fi
    if [[ ! -f "$APPDIR/fop-1.0/lib/fop-hyph.jar" ]]; then
        echo "ERROR... The hyphenation library for Apache FOP 1.0 was not found at APPDIR/fop-1.0/lib/fop-hyph.jar. Be sure to install the OFFO hyphenation library for FOP (fop-hyph.jar)."
        exit 1
    fi
}

# Adjust the DocBook XSL location in the XML entities file
function updateToLocal {
    echo "Updating XML entities file to local DocBook XSL path..."
    cd ../common
    echo '<!ENTITY LOCALDOCBOOKXSL "'$APPDIR'/docbook-xsl-ns-1.78.1">' > dynamic.ent
    cd ../scripts
}

# Create a new results directory. If one exists, remove it first.
function createResultsDir {
    if [[ -d build_results ]]; then
        echo "Removing previous build results..."
        rm -rf build_results
    fi
    echo "Creating new build results directory..."
    mkdir build_results
}

# Transform one of the PDF documents
# $1 = string associated with the document in the directory and file names
function buildPdf {
    echo "Transforming $1 from XML to FO..."
    cd ../doc-$1
    xsltproc --xinclude --output doc-$1.fo $1.xsl doc-$1.xml
    echo "Transforming $1 from FO to PDF..."
    $APPDIR/fop-1.0/fop -fo doc-$1.fo -pdf doc-$1.pdf
    rm doc-$1.fo
    mv doc-$1.pdf ../scripts/build_results/doc-$1-$(date +"%Y%m%d%H%M").pdf
    echo "COMPLETED: Doc build for $1."
}

function autogenApiSource {
    # Run the process in the development environment to generate these components
    # Copy the eapplication.wadl file used for API resources
    # Edit out the namespace at the top of eapplication.wadl (so that it
    # won't attempt to validate against the WADL schema during processing)
    # Run the process to generate the example files
    ruby get_resources.rb FIXME/sli/api/src/main/resources/wadl/resources.json cacd9227-5b14-4685-babe-31230476cf3b http://local.slidev.org:8080/api/rest http://localhost/api/rest
    # Copy the examples files that support the API resources
    # Copy the API XSD
    cp FIXME/sli/domain/src/main/resources/sliModel/SLI.xsd FIXME/modules/autogenerated/inbloom-api.xsd
}

function autogenDataModelSource {
    # Run the process to generate the schema.xml file describing the data model
    java -jar .<SLI_HOME>/sli/modeling/docgen/target/docgen-1.0-SNAPSHOT-jar-with-dependencies.jar -outFolder . -outFile schema.xml -xmiFile <SLI_HOME>/sli/domain/src/main/resources/sliModel/SLI.xmi -domainFile <SLI_HOME>/sli/domain/src/main/resources/sliModel/domains.xml
}

# Transform the developer HTML
function buildDevHTML {
    echo "Handling the autogenerated content that came from the code base..."
    cd ../modules/autogenerated
    echo "Transforming autogenerated data model content to DocBookXML..."
    java -cp $APPDIR/saxon9he.jar net.sf.saxon.Transform -t -s:schema.xml -xsl:../../common/schema-to-docbook.xsl -o:../auto-data_model.xml
    echo "Transforming the API resources to DocBook XML..."
    java -cp $APPDIR/saxon9he.jar net.sf.saxon.Transform -t -s:eapplication.wadl -xsl:../../common/api-wadl-to-docbook.xsl
    echo "Transforming the Developer Documentation from DocBook XML to HTML..."
    cd ../../doc-developer
    xsltproc --xinclude -stringparam base.dir doc-developer-OUTPUT ../common/inbloom-html-chunk.xsl doc-developer.xml
    echo "Assembling the supporting files for Developer Documentation..."
    if [[ ! -f "doc-developer-OUTPUT/index.html" ]]; then
        echo "ERROR... Developer documentation did not build successfully. Exiting documentation build process..."
        exit 1
    fi
    ./assembleSupportingFiles.sh doc-developer-OUTPUT
    if [[ ! -f "doc-developer-OUTPUT/css/techpubs.css" ]]; then
        echo "ERROR... Supporting files for developer documentation were not assembled correctly."
        exit 1
    fi
    mv doc-developer-OUTPUT ../scripts/build_results/doc-developer-$(date +"%Y%m%d%H%M")
    echo "COMPLETED: Doc build for developer."
}

# ######################################################################
# MAIN SCRIPT
# ######################################################################
if [[ -z $1 ]]
    then
        echo "ERROR: No argument provided."    
        printUsage
        exit 1
fi

# Build the docs based on the argument provided.
case "$1" in
    all) checkEnv
         updateToLocal
         createResultsDir
         buildPdf admin
         buildPdf dashboard
         buildPdf ingestion
         buildPdf runbook
         buildDevHTML
         ;;
    pdf) checkEnv
	 updateToLocal
	 createResultsDir
	 buildPdf admin
	 buildPdf dashboard
	 buildPdf ingestion
         buildPdf runbook
	 ;;
    admin) checkEnv
           updateToLocal
           createResultsDir
           buildPdf admin
           ;;
    dashboard) checkEnv
               updateToLocal
               createResultsDir
               buildPdf dashboard
               echo "Pairing PDF with supporting JSON file..."
               mkdir ../scripts/build_results/doc-dashboard/
               cd ../scripts/build_results/doc-dashboard/
               cp ../../../doc-dashboard/sample_dashboard_customization.json .
               mv ../doc-dashboard*.pdf .
               ;;
    dev) checkEnv
         updateToLocal
         createResultsDir
         buildDevHTML
         ;;
    ingestion) checkEnv
               updateToLocal
               createResultsDir
               buildPdf ingestion
               ;;
    runbook) checkEnv
             updateToLocal
             createResultsDir
             buildPdf runbook
             ;;
    help) printUsage
          ;;
    *) echo "ERROR: Invalid argument provided."
       printUsage
       exit 1
esac

