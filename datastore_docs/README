This repository is targeted to developing and building the source content 
for technical publications for inBloom. This file describes the contents 
and provides instructions for producing documentation from them.

------------------------------------------------------------------------
REPOSITORY CONTENTS SUMMARY:

archive - Older documentation, mostly Microsoft Word file formats. This 
          is preserved here as a historical record and on the off 
          chance we have to produce new versions of these files.

common - XSL, CSS, and other custom files used while writing content and 
         building documentation.

doc-* - Root directories for individual document deliverables. For docs that
        use DocBook XML the root XML file for the document lives in this
        directory, and the modules that it calls with Xinclude live in the
        modules directory. Descriptions for each deliverable can be found in
        the LIST_OF_DOCS text file in this directory.
        
        NOTE: The "runbook.xsl" file includes comments on how to make
              use of a markup system to show changes between runbook revisions.
              This was used extensively before and after the 1.0 release, but
              has not been used consistently since release 1.6. (SEW 8/8/2013)        

modules - XML files containing the content used to build user-facing
          documentation that is following the DocBook XML standard. 
          
          NOTE: All the DocBook XML files were originally placed at
                the root of this directory, but newer files were placed in 
                concept, reference, and task subdirectories in hopes of 
                eventually moving to the DITA XML standard.
          
prototype - A sandbox that was used to developer a prototype for better 
            developer documentation.
          
scripts - Scripts used in preparing documentation deliverables as described
          later in this file.

techpubs.xpr - The oXygen project file, which saves oXygen-specific 
               configuration that can be used when maintaining content in the
               oXygen IDE

------------------------------------------------------------------------
SET UP AN ENVIRONMENT TO BUILD DOCUMENTATION:

A separate file called SETUP has been created with the information and
instructions needed to set up your build environment for documentation.
Find "SETUP" beside this "README" file at the root of the repository.

------------------------------------------------------------------------
HOW TO BUILD & PREPARE DELIVERABLES:

1. UPDATE FRONT MATTER:
   In this repository checkout, update files as follows to reflect the current
   version of the product in the front matter of the documents:
   
   * common/entities.ent: Update CURRENTSPRINT, CURRENTRELEASEVERSION, and
     CURRENTRELEASEDATE as appropriate.
   * Revision history XML for each document (see root XML, or may be in a 
     separate XML file in the same directory): If it hasn't been done already,
     create a new revision entry using the CURRENTRELEASEVERSION and 
     CURRENTRELEASEDATE entities. Update the previous revision 
     entry in the table to have the static revision number and date value for 
     that product release. Complete the description of documentation changes
     that apply to this deliverable for the new release entry, even if it is
     to say "No changes in this release."
   
2. GENERATE API AND DATA MODEL COMPONENTS FROM THE CODE BASE:
   Developer documentation requires the most recent information about the
   API and data model. This comes from running a script in the "datastore"
   repository, the code repository for inBloom.

   Script location:
   <datastore_root>/sli/config/scripts/documentation/generate_doc_artifacts.sh
   
   Required to run the script:
   A current operating inBloom code developer environment (documented by 
   engineers) with the API and ingestion servers running.
   
   Results:
   <datastore_root>/sli/config/scripts/documentation/autogenerated
   Directory includes the artifacts as follows:
   * eapplication.wadl
   * ch-example-vN.xml, where N is an API version (such as 1.0, 1.1, etc.)
   * schema.xml
   * inbloom-api.xsd

   AFTER GENERATING THESE, copy them to modules/autogenerated/
   in this "datastore_docs" repository. (If these new copies are good
   and up-to-date, feel free to check in and push them to "datastore_docs".)

4. GENERATE THE DELIVERABLES THAT COME FROM XML SOURCE:
   In the command line environment that you can set up using the steps in 
   the file "SETUP" (in this same directory), change to the scripts directory 
   in this repository checkout and run the build script with the "all"
   argument, generating all docs that use XML source:
           ./build_inbloom_docs.sh all
   When the script finishes, the results will be in the "build_results"
   directory created in the scripts directory. Move, compress, and rename
   these files as needed. For file and directory names, the inBloom project 
   has been using a "identifier-version" format, such as "doc-developer-1.9.82". 

5. ASSEMBLE USER RELEASE NOTES:
   This task requires more manual work for assembly:
   
   5.1 Throughout the release cycle, edit the release notes staged in the
       wiki. Consult with product owners and the release manager about any
       questions, and edit items as they come in.
   5.2 Closer to the time of release, in the doc-release_notes subdirectory
       of this repository, copy either the last or the template HTML file 
       to create a new HTML file. Name the file following the pattern shown
       in that directory.
   5.3 Copy the known issues list from the previous release notes to the 
       new file, then check each item in Rally to determine if it's still
       a "known issue" or has been closed. Consult with a product owner
       or release manager to clear up any questions about known issues.
   5.4 When the wiki-staged release notes are ready for delivery, edit the
       HTML file to incorporate the content from that wiki page.
   
   NOTE: The template is used to capture the format and boilerplate test
         that inBloom wanted for these release notes. Do not deviate from
         that without consulting inBloom.
   
6. ASSEMBLE THE ENVIRONMENT SPECIFICATION:
   Historically, engineers were responsible for creating an environment
   specification document, and technical writers were only responsible for
   editing and formatting it in Word for delivery. Check with the current
   release manager to confirm that this is still the routine. If so, simply
   copy the previous environment specification Word document and replace
   content as needed for the new document.

FINAL CHECKLIST:
[  ] User release notes (HTML)
[  ] Environment specification (DOCX)
[  ] Runbook (PDF)
[  ] Administrator doc (PDF)
[  ] Ingestion doc (PDF)
[  ] Developer doc (HTML)
[  ] Dashboard customization doc (PDF)

------------------------------------------------------------------------
