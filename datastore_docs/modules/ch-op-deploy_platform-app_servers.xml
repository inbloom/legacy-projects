<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter [
<!ENTITY % slc_entities SYSTEM "../common/entities.ent">
%slc_entities;
<!ENTITY IMAGEDIR "../common/images">
]>

<chapter xml:id="doc-e8475893-b374-4b30-9c74-5aa5e52f0d95" xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0">
    <title>Deploy Platform: Application Servers</title>
    <para> The &PRODUCTABBR; platform requires two software applications for the infrastructure's
        application servers: Tomcat and Rails. The next two sections cover the procedure for
        deploying each of these applications within &PRODUCTABBR;. </para>
    <section xml:id="doc-ccb2e87b-47ee-4f3e-a45e-64c787ccd2fd">
        <title>Tomcat</title>
        <para> Use the following procedure to create a base Tomcat image for use in &PRODUCTABBR;: </para>
        <note>
            <para>All &PRODUCTABBR; java web applications should be deployed to the context
                specified by the .war filename. They should not be deployed to the root context in
                Tomcat.</para>
        </note>
        <procedure>
            <step>
                <para>Start with a current version of RedHat Enterprise Linux 64-bit.</para>
            </step>
            <step>
                <para>Perform all the appropriate package updates to the operating system.</para>
            </step>
            <step>
                <para>Disable any services that are not required.</para>
            </step>
            <step>
                <para>Update the local firewall rules for the environment.</para>
            </step>
            <step>
                <para>Create and attach a storage volume, EBS if Amazon, to support the Tomcat
                    Installation and the log files generated by application.</para>
                <substeps>
                    <step>
                        <para>Use Logical Volume Management functionality to support the addition of
                            more disk space on the fly.</para>
                    </step>
                    <step>
                        <para>Test and low load servers generally need 10 GB of disk space for the
                            logs and the Tomcat deployment.</para>
                    </step>
                    <step>
                        <para>High use servers, such as API and Ingestion servers in Production
                            environments should have approximately 100GB of disk storage for logs.
                            They should also have a log rotation and disk space utilization
                            threshold monitoring.</para>
                    </step>
                    <step>
                        <para>Space can be split between multiple logical volumes if LVM is used. If
                            this instance, ensure that at least 2GB is available for the Tomcat
                            Installation, and that the remaining space can be used for logs.</para>
                    </step>
                    <step>
                        <para>Actual file system layouts should adhere to each operator’s identified
                            best practices. The documentation refers to two distinct directories,
                            /opt/tomcat, and /var/log/tomcat/.</para>
                    </step>
                </substeps>
            </step>
            <step>
                <para>Install the Oracle Java SE Development Kit 6. The software does not operated
                    properly with OpenJDK or Oracle Java 7 or 8.</para>
                <para><emphasis>Note: </emphasis>Ensure that running <code>java -version</code> from
                    the command line returns the appropriate Java Runtime installation.</para>
            </step>
            <step>
                <para>Download Apache Tomcat 7.0 (http://tomcat.apache.org/). The current release of
                    the 7.0 series is highly recommended.</para>
            </step>
            <step>
                <para>Create the service account user that Tomcat should "Run as".</para>
            </step>
            <step>
                <para>Extract the installation files to your Tomcat installation directory.</para>
                <para>
                    <programlisting><![CDATA[
tar xvf /path/to/apache-tomcat-7.0.32.tar.gz –D /opt/tomcat/
							]]></programlisting>
                </para>
            </step>
            <step>
                <para>Set the log directory within the Tomcat installation to your dedicated logging
                    directory:</para>
                <programlisting><![CDATA[
rm –r –f /opt/tomcat/apache-tomcat-7.0.32/logs
ln –s /var/log/tomcat /opt/tomcat/apache-tomcat-7.0.32/logs
							]]></programlisting>
                <para>Recursively update the file ownerships for the /opt/tomcat, /var/log/tomcat
                    directories to the service account user that you created in step 8.</para>
            </step>
            <step>
                <para>You use a stop/start script to manage your Tomcat installation. If your Tomcat
                    user is not called tomcat or if your JAVA_HOME location is different, then the
                    appropriate changes for your environment need to be made to this
                    /etc/init.d/tomcat "start" script example. </para>
                <programlisting><![CDATA[
#!/bin/bash  
# description: Tomcat Start Stop Restart  
# processname: tomcat  Deploy Platform: Application Servers
# chkconfig: 234 20 80
JAVA_HOME=/usr/java/jdk1.6.0_31  
export JAVA_HOME  
PATH=$JAVA_HOME/bin:$PATH  
export PATH  
CATALINA_HOME=/opt/tomcat/apache-tomcat-7.0.27
case $1 in  
start)  
/bin/su tomcat $CATALINA_HOME/bin/startup.sh  
;;   
stop)     
/bin/su tomcat $CATALINA_HOME/bin/shutdown.sh  
;;   
restart)  
/bin/su tomcat $CATALINA_HOME/bin/shutdown.sh  
/bin/su tomcat $CATALINA_HOME/bin/startup.sh  
;;   
esac      
exit 0

							]]></programlisting>
            </step>
            <step>
                <para>Provide the appropriate level of permissions and ownership to your start/stop
                    script. The appropriate levels are dependant on your environment.</para>
            </step>
            <step>
                <para>Ensure your Tomcat installation starts on boot. The following commands are
                    valid only for RedHat based distributions and assume the Tomcat start script is
                    named "tomcat".</para>
                <para>
                    <programlisting><![CDATA[chkconfig –add tomcat]]></programlisting>
                </para>
                <para>
                    <programlisting><![CDATA[chkconfig –level 234 tomcat on]]></programlisting>
                </para>
            </step>
            <step>
                <para>If the server is used to host an ingestion service, an operator must ensure
                    that the Tomcat service can tead and write to the files uploaded for ingestion.
                </para>
            </step>
        </procedure>
        <!-- RBM commenting instead of deleting as it is not clear from defect if it should remain or not
        <para>
            If the Tomcat server is intended to host an ingestion service, 
            there must be attention paid to the O/S or process umask of the system.  
            If the landing zone user group ID numbers match the group ID that the user 
            that the Tomcat process operates under, then a umask of 770 is required. 
            If the group IDs do not match, then a umask of 777 must be set for the 
            ingestion processor to be able to read and write to the files that the 
            user wrote to their landing zone. This is a limited concern as the users 
            of the landing zone should be chrooted into their home directories.  
            The umask is also important as the ingestion service will create the 
            home directories for the users logging into the landing zone, and if 
            the umask is incorrect, the users will be unable to write files to the 
            landing zone.
        </para> -->
    </section>
    <section xml:id="doc-530a1f77-e396-4fc7-a60c-3d874d3b9fa9">
        <title>Rails</title>
        <procedure>
            <step>
                <para> Start with RC global base image </para>
            </step>
            <step>
                <para> Install RVM. Install Ruby 2.0.0-p353 via RVM and make it the default. </para>
                <programlisting><![CDATA[
gem install bundler && gem install rails
							]]></programlisting>
            </step>
            <step>
                <para> Install Phusion Passenger. Tested against version 3.0.12. We used Puppet's
                    "rvm" module to install Passenger as follows: <programlisting><![CDATA[
class { 'rvm::passenger::apache':
    version => "3.0.12",
    ruby_version => 'ruby-2.0.0-p353',
    mininstances => '3',
    maxinstancesperapp => '0',
    maxpoolsize => '30',
    spawnmethod => 'smart-lv2';
}
							]]></programlisting>
                </para>
            </step>
            <step>
                <para> As you can see from the above Puppet stanza, we tested our Rails applications
                    under Apache. Other HTTP servers like nginx may or may not work. This Puppet
                    class creates <filename>/etc/httpd/conf.d/passenger.conf</filename> as follows: <programlisting><![CDATA[
LoadModule passenger_module /usr/local/rvm/gems/ruby-2.0.0-p353/gems/\
passenger-3.0.12/ext/apache2/mod_passenger.so

<IfModule passenger_module>
  PassengerRoot /usr/local/rvm/gems/ruby-2.0.0-p353/gems/passenger-3.0.12
  PassengerRuby /usr/local/rvm/wrappers/ruby-2.0.0-p353/ruby
  PassengerMaxPoolSize 30
  PassengerPoolIdleTime 300
  PassengerMaxInstancesPerApp 0

  PassengerMinInstances 3
  PassengerSpawnMethod smart-lv2

</IfModule>
							]]></programlisting>
                </para>
            </step>
            <step>
                <para> Our <filename>/etc/httpd/conf.d/ssl.conf</filename> looked like: <programlisting><![CDATA[
LoadModule ssl_module modules/mod_ssl.so
Listen 443
SSLPassPhraseDialog  builtin
SSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)
     SSLSessionCacheTimeout  300
SSLMutex default
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
SSLCryptoDevice builtin
<VirtualHost _default_:443>
DocumentRoot "/var/www/html/public"
ErrorLog logs/ssl_error_log
TransferLog logs/ssl_access_log
LogLevel warn
SSLEngine on
SSLProtocol all -SSLv2
SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW
SSLCertificateFile /etc/ssl/example.com/sli-crt.crt
SSLCertificateKeyFile /etc/ssl/example.com/sli-key2.key
SSLCertificateChainFile /etc/ssl/example.com/intermediateCA.crt
<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
</Files>
<Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>
SetEnvIf User-Agent ".*MSIE.*" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0
CustomLog logs/ssl_request_log \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
   RailsBaseURI /
</VirtualHost>          
							]]></programlisting>
                </para>
            </step>
            <step>
                <para> Firewall: accept https </para>
            </step>
        </procedure>
    </section>
</chapter>
