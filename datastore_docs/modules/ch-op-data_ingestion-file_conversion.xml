<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter [
<!ENTITY % slc_entities SYSTEM "../common/entities.ent">
%slc_entities;
]>

<chapter xml:id="doc-523538ed-1b29-4160-aefb-0d949637993c"
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        
    <title>Ingestion File Conversion Tool</title>
    
    <para>
        &PRODUCTABBR; can only ingest files that are compliant with the 
        Ed-Fi v1.0.07 specification. &COMPANYABBR; provides an file conversion 
        tool to convert an organization's data into Ed-Fi standard XML files,
        ready for ingestion by &PRODUCTABBR;.
    </para>
    <para>
        This is one of the open source applications from &COMPANYABBR;. 
        You can download the source from the &COMPANYABBR; Github repository: 
        <link xlink:show="new" xlink:href="https://github.com/inbloom/csv2xml">https://github.com/inbloom/csv2xml</link>.
    </para>
    <note>
        <para>
            Any data that is not supported by the Ed-Fi schema will be 
            ignored by the converter. For more information on the latest 
            Ed-Fi schema, please download the 
            <link xlink:href="http://www.ed-fi.org/wp-content/uploads/2011/06/Ed-Fi-Core-1.0.01.xsd_.zip" xlink:show="new">Ed-Fi schema zip file</link>.
        </para>
    </note>
    <para>
        The sections that follow provide instructions for installing and
        using this tool.
    </para>
    <section xml:id="bebf896a-00df-48c5-a3e8-b710f03a2318"><title>CSV File Formatting</title>
        <para>Before you use the tool to convert CSV files, the CSV files must: <itemizedlist>
                <listitem>
                    <para>contain data that is compliant with the latest Ed-Fi schema.</para>
                    <note>
                                <para>Any data that is not supported by the Ed-Fi schema will be
                            ignored by the converter. For more information on the latest Ed-Fi
                            schema, please download the <link
                                xlink:href="http://www.ed-fi.org/wp-content/uploads/2011/06/Ed-Fi-Core-1.0.01.xsd_.zip"
                                xlink:show="new">Ed-Fi schema zip file</link>. </para>
                            </note>
                </listitem>
                <listitem>
                    <para>contain records that are sorted in ascending order.</para>
                </listitem>
                <listitem>
                    <para>not contain data that conflicts with data in another CSV file you are
                        importing. This tool does not check data integrity across CSV files.</para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section xml:id="doc-8f12a708-caeb-4729-a292-de9862c6845a">
        <title>Installing the File Conversion Tool</title>
        <para>
            This tool is written in Java and maintained as an Eclipse project.
            To get started with the tool, you need to download it and open the
            project in the Eclipse integrated development environment:
        </para>
        <procedure>
            <step>
                <para>
                    Download the zip file for the sample project from
                    <link xlink:show="new" xlink:href="https://github.com/inbloom/">https://github.com/inbloom/</link>.
                </para>
            </step>
            <step>
                <para> Unzip the file into a folder on your computer such as
                        <filename>C:\&PRODUCTABBR;_project</filename> or
                        <filename>Documents/&PRODUCTABBR;_project</filename>. </para>
            </step>
            <step> 
                <para>
                    Import the files into Eclipse as a Java project. 
                </para>
            </step>
        </procedure>
        <para>
            The project is built and tested using Java 1.6.0_31 and Eclipse 
            Indigo with SP1. The following is a look at the structure of
            the project:
        </para>
        <programlisting><![CDATA[    
--csv2xml
    .classpath
    .project
        --src
            --org
                --slc
                    --sli
                        --sample
                            --entities
                            --transform
    --data
    --edfiXsd
            ]]></programlisting>
        <itemizedlist>
            <listitem>
                <para>
                    <filename>csv2xml</filename> is the project's root folder
                </para>
            </listitem>
            <listitem>
                <para>
                    <filename>src/org/slc/sli/sample/entities</filename> 
                    contains JAXB java source code for all SLI-EdFi entities
                </para>
            </listitem>
            <listitem>
                <para>
                    <filename>src/org/slc/sli/sample/transform</filename> 
                    contains the source code of the CSV2XML transformer
                </para>
            </listitem>
            <listitem>
                <para>
                    <filename>data</filename> contains the sample CSV files 
                    for this project
                </para>
            </listitem>
            <listitem>
                <para>
                    <filename>edfiXsd</filename> contains the SLI-EdFi 
                    schema XSD files
                </para>
            </listitem>
        </itemizedlist>
        <para>
            View the sample files in the <filename>data</filename> folder.
            The following list reflects the contents of those files at the time 
            of this writing:
        </para>
        <itemizedlist>
            <listitem>
                <para><filename>Student.csv</filename></para>
                <programlisting><![CDATA[
StudentUSI,Verification,PersonalTitlePrefix,FirstName,MiddleName,LastSurname,GenerationCodeSuffix,Sex,BirthDate,ProfileThumbnail,HispanicLatinoEthnicity,RacialCategory
100000,Previously verified school records,Mr,Brett,Sergio,Townsend,,Male,1997-13-03,,1,Asian
100001,Other official document,Mr,Lee,Rick,Yang,,Male,2000-13-30,thumbnail,1,American Indian - Alaskan Native
100002,Previously verified school records,Ms,Angelique,Ann,Meyer,,Female,2001-13-20,,1,White            
            ]]></programlisting>
            </listitem>
            <listitem>
                <para><filename>StudentAddress.csv</filename></para>
                <programlisting><![CDATA[
StudentUSI,AddressType,StreetNumberName,City,StateAbbreviation,PostalCode,NameOfCounty
100001,Physical,477 Ash Street,JAMAICA,NY,11433,Queens
100001,Other,520 Hill Street,BOONVILLE,NY,13309,Oneida
100002,Billing,582 Valley Street,NORWOOD,NY,13668,Saint Lawrence               
            ]]></programlisting>
            </listitem>
            <listitem>
                <para><filename>StudentLanguage.csv</filename></para>
                <programlisting><![CDATA[
StudentUSI,Language
100001,Spanish
100001,English
100002,Turkish                
            ]]></programlisting>
            </listitem>
            <listitem>
                <para><filename>Parent.csv</filename></para>
                <programlisting><![CDATA[
ParentUSI,Verification,PersonalTitlePrefix,FirstName,MiddleName,LastSurname,GenerationCodeSuffix,MaidenName,Sex
900000,Other non-official document,Mr,Tracy,Marc,Pugh,,,Male
900001,Parents affidavit,Ms,Louisa,Christine,Mullins,,,Female
900002,State-issued ID,Mr,Allan,Allan,Edwards,Jr,,Male                
            ]]></programlisting>
            </listitem>
            <listitem>
                <para><filename>StudentParentAssociation.csv</filename></para>
                <programlisting><![CDATA[
StudentUSI,ParentUSI,Relation,PrimaryContactStatus,LivesWith,EmergencyContactStatus
100000,900000,Father,1,0,0
100000,900001,Mother,0,0,0
100001,900002,Father,0,1,1
            ]]></programlisting>
            </listitem>
        </itemizedlist>
        <para>
            Based on this data, we know the following:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Student 100000 does not have an address and does not know any languages.
                </para>
            </listitem>
            <listitem>
                <para>
                    Student 100001 has two addresses and knows both Spanish and English.
                </para>
            </listitem>
            <listitem>
                <para>
                    Student 100002 has one address and knows Turkish.
                </para>
            </listitem>
            <listitem>
                <para>
                    The <filename>Parent.csv</filename> file lists three parents.
                </para>
            </listitem>
            <listitem>
                <para>
                    Student 100000 is associated with parent 900000 and parent 900001.
                </para>
            </listitem>
            <listitem>
                <para>
                    Student 100001 is associated with parent 900002.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    
    <section xml:id="doc-a2b3d4be-fe50-4d8c-b88b-4682a7f731bd">
        <title>Converting Data Files</title>
        <para>
            To provide instructions for using the file conversion tool,
            we're including steps for using sample CSV files from the
            Eclipse project for your first walkthrough. The walkthrough 
            converts data from five distinct CSV files into a single XML file. 
            The generated XML file will include student, parent, and 
            student-parent-association entities.
        </para>
        <para>
            After this walkthrough, you should be able to replicate the steps
            with your own CSV files:
        </para>
        <para>
            To update the source code for the package:
        </para>
        <procedure>
            <step>
                <para>
                    The source code in the 
                    <filename>org.slc.sli.sample.entities</filename> 
                    package is generated by a JAXB utility 
                    (<filename>xjc.sh/xjc.exe</filename>).
                    Start by updating this package whenever &PRODUCTABBR;
                    supports a new version of the Ed-Fi schema. This ensures
                    your converted files will be compliant with the latest
                    version of the Ed-Fi schema supported in &PRODUCTABBR;:
                </para>
                <substeps>
                    <step>
                        <para>
                            Download the updated schema files from Ed-Fi.
                        </para>
                    </step>
                    <step>
                        <para>
                            Replace the schema files in the project folder 
                            named <filename>edfiXsd</filename> with the schema 
                            files from step one.
                        </para>
                    </step>
                    <step>
                        <para>
                            Open a cmd/shell window and go to the 
                            <filename>edfiXsd</filename> folder.
                        </para>
                    </step>
                    <step>
                        <para>
                            Execute the command 
                            <command>xjc -b -Ed-Fi-Core.xjb -p org.slc.sli.sample.entities</command>.
                        </para>
                    </step>
                    <step>
                        <para>
                            Replace all java code in 
                            <filename>org.slc.sli.sample.entities</filename> 
                            with the newly generated code from step four.
                        </para>
                    </step>
                    <step>
                        <para>
                            Update Adapter2.java with the following code:
                        </para>
                        <programlisting><![CDATA[
                            
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href=">
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.04.20 at 03:09:04 PM EDT
//
 
package org.slc.sli.sample.entities;
 
import java.util.Calendar;
import javax.xml.bind.annotation.adapters.XmlAdapter;
 
public class Adapter2
    extends XmlAdapter<String, Calendar>
{
    public Calendar unmarshal(String value) {
        return (javax.xml.bind.DatatypeConverter.parseDate(value));
    }
 
    public String marshal(Calendar value) {
        if (value == null) {
            return null;
        }
        return (javax.xml.bind.DatatypeConverter.printDateTime(value).substring(0, 10));
    }
}
                        ]]></programlisting>
                    </step>
                </substeps>
            </step>
            <step>
                <para>
                    This file reads the entries in the CSV file and 
                    converts them to a record (hashmap) of columnname/value 
                    pairs. The file contains a utility method, 
                    <methodname>getDate(...)</methodname>, that converts 
                    a date string into a Calendar object. Edit this file
                    as needed to update the data format 
                    (<guilabel>yyyy-mm-dd</guilabel>) to match that of the
                    dates in your data file.
                </para>
            </step>
            <step>
                <para>
                    FIXME... copy editing incomplete
                </para>
            </step>
        </procedure>
    </section>    

                <!-- 
                <section xml:id="doc-1fa60f1b-abdc-4d77-b1e4-c83af01872ce">
                    <title><filename>CSV2XML Tranformer.java</filename></title>
                    <para>
                        This file converts records into JAXB java objects and adds them to an SLI-EdFi xml file.
                    </para>
                    <para>
                        The following flowchart displays the process of the sample code.
                    </para>
                    <figure xml:id="doc-c57c743f-bc1d-47ac-9f58-8c2f48ff97be">
                        <title/>
                        <mediaobject>
                            <imageobject>
                                <imagedata align="center" format="PNG" fileref="images/apps-csv2xml-workflow.png" scalefit="1"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </section>
                <section xml:id="doc-5c8a1fc8-3c21-4674-9113-3ca59c3dcd3f">
                    <title>Student Conversion</title>
                    <para>The code for the Student conversion is:</para>
                    <programlisting><![CDATA[
private Student getStudent() {
    Map<String, String> studentRecord = studentReader.getCurrentRecord();
    
    Student student = new Student();
    
    // set id
    String studentId = studentRecord.get("StudentUSI");
    student.setStudentUniqueStateId(studentId);
    student.setId("STUD_" + studentId);
    
    // set name
    student.setName(this.getName(studentRecord));
    
    // set sex
    student.setSex(SexType.fromValue(studentRecord.get("Sex")));
    
    // set birthData
    BirthData birthData = new BirthData();
    birthData.setBirthDate(CSVReader.getDate(studentRecord.get("BirthDate")));
    student.setBirthData(birthData);
    
    // set ProfileThumbnail
    String profile = studentRecord.get("ProfileThumbnail");
    if (!profile.isEmpty()) {
        student.setProfileThumbnail(profile);
    }
    
    // set HispanicLatinoEthnicity
    student.setHispanicLatinoEthnicity(studentRecord.get("HispanicLatinoEthnicity") == "1" ? true : false);
    
    // set raceType
    String racial = studentRecord.get("RacialCategory");
    if (!racial.isEmpty()) {
        RaceType raceType = new RaceType();
        raceType.getRacialCategory().add(RaceItemType.fromValue(racial));
        student.setRace(raceType);
    }
    
    // set addresses
    addStudentAddresses(student);
    
    // set languages
    addStudentLanguages(student);
    
    return student;
}
                    ]]></programlisting>
                    <para>
                        Notes on the above example: 
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                The <emphasis>set id</emphasis> section populates the student USI.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set name</emphasis> section sets the student name by calling the following code:
                            </para>
                        </listitem>
                    </itemizedlist>
                    <programlisting><![CDATA[
private Name getName(Map<String, String> nameRecord) {
        Name name = new Name();
 
        String verification = nameRecord.get("Verification");
        if (!verification.isEmpty()) {
            name.setVerification(PersonalInformationVerificationType.fromValue(verification));
        }
 
        String prefix = nameRecord.get("PersonalTitlePrefix");
        if (!prefix.isEmpty()) {
            name.setPersonalTitlePrefix(PersonalTitlePrefixType.fromValue(prefix));
        }
 
        name.setFirstName(nameRecord.get("FirstName"));
 
        String middleName = nameRecord.get("MiddleName");
        if (!middleName.isEmpty()) {
            name.setMiddleName(middleName);
        }
 
        name.setLastSurname(nameRecord.get("LastSurname"));
 
        String generation = nameRecord.get("GenerationCodeSuffix");
        if (!generation.isEmpty()) {
            name.setGenerationCodeSuffix(GenerationCodeSuffixType.fromValue(generation));
        }
 
        return name;
    }
                    ]]></programlisting>
                    <itemizedlist>
                        <listitem>
                            <para>
                                The <emphasis>set sex</emphasis> section sets the student's sex using the enumerated string type from the SLI-EdFi schema.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set birthData</emphasis> section sets the student's birthData. Only the student's birthDate is required. 
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set ProfileThumbnail</emphasis> section allows you to set a thumbnail for the student's profile. This section is optional.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set HispanicLatinoEthnicity</emphasis> section allows you to set the student's HispanicLatinoEntity as either 1 (true) or 0 (false).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set raceType</emphasis> section sets the student's racial category. If a student has multiple values for this category, please separate this into a separate CSV file and follow the language example below.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set addresses</emphasis> section allows you to set the student's address. If the student has multiple addresses, they must be provided in a separate addresses file. The code below is called to create more than addresses for the student: 
                            </para>
                        </listitem>
                    </itemizedlist>    
                    <programlisting><![CDATA[
private void addStudentAddresses(Student student) {
        String studentId = student.getStudentUniqueStateId();
 
        while (studentAddressReader.getCurrentRecord() != null) {
            Map<String, String> studentAddressRecord = studentAddressReader.getCurrentRecord();
 
            String id = studentAddressRecord.get("StudentUSI");
            if (id.compareTo(studentId) > 0) {
                // if the studentUSI of the address record is larger than studentUSI of the student
                // which means the current address record belongs to next student, not the current one.
                break;
            } else if (id.equals(studentId)) {
                student.getAddress().add(this.getAddress(studentAddressRecord));
            }
 
            studentAddressReader.getNextRecord();
        }
    }
                    ]]></programlisting>
                    <itemizedlist>
                        <listitem>
                            <para>
                                If the student has multiple languages, they must also be provided in a separate CSV file. The code below processes a student's multiple languages: 
                            </para>
                        </listitem>
                    </itemizedlist>
                    <programlisting><![CDATA[
private void addStudentLanguages(Student student) {
        String studentId = student.getStudentUniqueStateId();
 
        LanguagesType languages = new LanguagesType();
        while (studentLanguageReader.getCurrentRecord() != null) {
            Map<String, String> studentLanguageRecord = studentLanguageReader.getCurrentRecord();
 
            String id = studentLanguageRecord.get("StudentUSI");
            if (id.compareTo(studentId) > 0) {
                // if the studentUSI of the language record is larger than studentUSI of the student
                // which means the current language record belongs to next student, not the current one.
                break;
            } else if (id.equals(studentId)) {
                String ls = studentLanguageRecord.get("Language");
                if (!ls.isEmpty()) {
                    LanguageItemType language = LanguageItemType.fromValue(ls);
                    languages.getLanguage().add(language);
                }
            }
 
            studentLanguageReader.getNextRecord();
        }
        if (languages.getLanguage().size() > 0) {
            student.setLanguages(languages);
        }
    }
                    ]]></programlisting>
                </section>
                <section xml:id="doc-a224aae5-b49e-43f0-b2cd-37382985cecc">
                    <title>Parent Conversion</title>
                    <para>
                        The code for Parent conversion is:
                    </para>
                    <programlisting><![CDATA[
private Parent getParent() {
        Map<String, String> parentRecord = parentReader.getCurrentRecord();
 
        Parent parent = new Parent();
 
        // set Id
        String parentId = parentRecord.get("ParentUSI");
        parent.setParentUniqueStateId(parentId);
        parent.setId("PRNT_" + parentId);
 
        // set name
        parent.setName(this.getName(parentRecord));
 
        // set sex
        parent.setSex(SexType.fromValue(parentRecord.get("Sex")));
 
        return parent;
    }
                    ]]></programlisting>
                </section>
                <section xml:id="doc-a55e302b-8815-419c-b5cd-a0f5d1c9c22b">
                    <title>StudentParentAssociation Conversion</title>
                    <para>The code for the StudentParentAssociation conversion is:</para>
                    <programlisting><![CDATA[
private StudentParentAssociation getStudentParentAssociation() {
        Map<String, String> studentParentAssociationRecord = studentParentAssociationReader.getCurrentRecord();
 
        StudentParentAssociation studentParentAssociation = new StudentParentAssociation();
 
        // set student reference
        StudentIdentityType sit = new StudentIdentityType();
        sit.setStudentUniqueStateId(studentParentAssociationRecord.get("StudentUSI"));
        StudentReferenceType srt = new StudentReferenceType();
        srt.setStudentIdentity(sit);
        studentParentAssociation.setStudentReference(srt);
 
        // set parent reference
        ParentIdentityType pit = new ParentIdentityType();
        pit.setParentUniqueStateId(studentParentAssociationRecord.get("ParentUSI"));
        ParentReferenceType prt = new ParentReferenceType();
        prt.setParentIdentity(pit);
        studentParentAssociation.setParentReference(prt);
 
 
        // set relation
        if (!studentParentAssociationRecord.get("Relation").isEmpty()) {
            studentParentAssociation
                    .setRelation(RelationType.fromValue(studentParentAssociationRecord.get("Relation")));
        }
 
        // set primary contact status
        String primaryContact = studentParentAssociationRecord.get("PrimaryContactStatus");
        if (!primaryContact.isEmpty()) {
            studentParentAssociation.setPrimaryContactStatus(primaryContact.equals("1") ? true : false);
        }
 
        // set lives with
        String livesWith = studentParentAssociationRecord.get("LivesWith");
        if (!livesWith.isEmpty()) {
            studentParentAssociation.setLivesWith(livesWith.equals("1") ? true : false);
        }
 
        // set emergency contact status
        String emergencyContact = studentParentAssociationRecord.get("EmergencyContactStatus");
        if (!emergencyContact.isEmpty()) {
            studentParentAssociation.setEmergencyContactStatus(emergencyContact.equals("1") ? true : false);
        }
 
        return studentParentAssociation;
    }                        
                    ]]></programlisting>
                    <itemizedlist>
                        <listitem>
                            <para>
                                The <emphasis>set student reference</emphasis> section sets a studentReference for a StudentParentAssocation entity.  
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The <emphasis>set parent reference</emphasis> section sets a parent reference for a StudentParentAssociation entity.
                            </para>
                        </listitem>
                    </itemizedlist>
                </section>
                <section xml:id="doc-dfea60dd-12ea-4962-99df-d308299e5555">
                    <title>Print XML File</title>
                    <para>The code for generating the XML file is:</para>
                    <programlisting><![CDATA[
private void printInterchangeStudentParent(PrintStream ps) throws JAXBException {
        int studentCounter = 0;
        int parentCounter = 0;
        int studentParentAssociationCounter = 0;
 
        Marshaller marshaller = getMarshaller();
 
        InterchangeStudentParent interchangeStudentParent = new InterchangeStudentParent();
        List<Object> list = interchangeStudentParent.getStudentOrParentOrStudentParentAssociation();
 
        // process student
        while (studentReader.getCurrentRecord() != null) {
            list.add(this.getStudent());
            studentReader.getNextRecord();
            studentCounter++;
        }
 
        // process parent
        while (parentReader.getCurrentRecord() != null) {
            list.add(this.getParent());
            parentReader.getNextRecord();
            parentCounter++;
        }
 
        // process studentParentAssociation
        while (studentParentAssociationReader.getCurrentRecord() != null) {
            list.add(this.getStudentParentAssociation());
            studentParentAssociationReader.getNextRecord();
            studentParentAssociationCounter++;
        }
 
        marshaller.marshal(interchangeStudentParent, ps);
 
        System.out.println("Total " + studentCounter + " students are exported.");
        System.out.println("Total " + parentCounter + " parents are exported.");
        System.out.println("Total " + studentParentAssociationCounter
                + " student-parent-associations are exported.");
        System.out.println("Total " + ( studentCounter + parentCounter + studentParentAssociationCounter)
                + " entities are exported.");
    }                        
                    ]]></programlisting>
                    <itemizedlist>
                        <listitem>
                            <para>
                                The <methodname>marshaller.marshal(interchangeStudentParent, ps)</methodname> method generates the XML file.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The final lines of the file generate a report of the file conversion.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        Once the XML file is generated, the main method calls SchemaValidator to validate the file.
                    </para>
                    <programlisting><![CDATA[
public static void main(String[] args) throws Exception {
        CSV2XMLTransformer transformer = new CSV2XMLTransformer();
        transformer.loadData();
 
        PrintStream ps = new PrintStream(new File(interchangeStudentParentFile));
        transformer.printInterchangeStudentParent(ps);
 
        SchemaValidator.check(outputPath);
    }                    
                    ]]></programlisting>
                </section>
            </section>
            <section>
                <title>Supporting New Entities</title>
                <para>
                    The following are the steps to support a new entity. We will use the Teacher entity for the example.
                </para>
                <procedure>
                    <step>
                        <para>
                            Generate one or more teacher-related CSV files. Make sure that you include all of the data that is required for the SLI-EdFi schema.
                        </para>
                    </step>
                    <step>
                        <para>
                            Find the correct Interchange XSD file that contains the Teacher entity. In this case, the file is <filename>Interchange-StaffAssociation.xsd</filename>. 
                        </para>
                    </step>
                    <step>
                        <para>
                            Follow the student approach to create the teacher entities from the CSV files to generate the interchangeStaffAssociation.xml file.
                        </para>
                    </step>
                </procedure>
            </section>
        </section> -->

</chapter>
